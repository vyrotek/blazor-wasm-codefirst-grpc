@page "/fetchdata"
@using Example.Shared
@using Example.Shared.WeatherForecast;
@inject IWeatherForecastService WeatherForecastFacade
@inject AuthStateProvider AuthProvider

<PageTitle>Authenticated Weather Forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>

        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <a href="/">Not Authorized!</a>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    public required Task<AuthenticationState> authState { get; set; }

    private List<WeatherForecastData>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity!.IsAuthenticated)
        {
            forecasts = await WeatherForecastFacade.GetForecastAsync();
        }
    }
}
